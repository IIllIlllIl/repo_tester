```python
import pytest
from base64 import b32encode

# Function to test (provided in the prompt)
def base32_encode(data: bytes) -> bytes:
    """Encodes binary data to Base32"""
    B32_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
    binary_data = "".join(bin(ord(d))[2:].zfill(8) for d in data.decode("utf-8"))
    binary_data = binary_data.ljust(5 * ((len(binary_data) // 5) + 1), "0")
    b32_chunks = map("".join, zip(*[iter(binary_data)] * 5))
    b32_result = "".join(B32_CHARSET[int(chunk, 2)] for chunk in b32_chunks)
    return bytes(b32_result.ljust(8 * ((len(b32_result) // 8) + 1), "="), "utf-8")

# Test cases
def test_base32_encode_normal():
    """Test normal cases for base32_encode"""
    # Test cases from docstring
    assert base32_encode(b"Hello World!") == b'JBSWY3DPEBLW64TMMQQQ===='
    assert base32_encode(b"123456") == b'GEZDGNBVGY======'
    assert base32_encode(b"some long complex string") == b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='

    # Additional normal case
    assert base32_encode(b"test") == b'ORSXG5A='

def test_base32_encode_boundary():
    """Test boundary cases for base32_encode"""
    # Empty string
    assert base32_encode(b"") == b''

    # Single character
    assert base32_encode(b"A") == b'IE======'

    # Exactly 5 bytes (no padding needed)
    assert base32_encode(b"12345") == b'GEZDGNBV'

    # Exactly 8 bytes (full block)
    assert base32_encode(b"12345678") == b'GEZDGNBVGY3TQOI='

def test_base32_encode_error():
    """Test error cases for base32_encode"""
    # Non-bytes input
    with pytest.raises(TypeError):
        base32_encode("string")  # type: ignore
    with pytest.raises(TypeError):
        base32_encode(123)  # type: ignore
    with pytest.raises(TypeError):
        base32_encode([1, 2, 3])  # type: ignore
```