```python
import base64
import pytest

# Function under test
def base32_encode(data: bytes) -> bytes:
    B32_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
    binary_data = "".join(bin(ord(d))[2:].zfill(8) for d in data.decode("utf-8"))
    binary_data = binary_data.ljust(5 * ((len(binary_data) // 5) + 1), "0")
    b32_chunks = map("".join, zip(*[iter(binary_data)] * 5))
    b32_result = "".join(B32_CHARSET[int(chunk, 2)] for chunk in b32_chunks)
    return bytes(b32_result.ljust(8 * ((len(b32_result) // 8) + 1), "="), "utf-8")

# ===== Test cases normal =====
def test_base32_encode_normal():
    # Test standard cases against Python's built-in base64 implementation
    test_cases = [
        (b"Hello World!", b'JBSWY3DPEBLW64TMMQQQ===='),
        (b"123456", b'GEZDGNBVGY======'),
        (b"some long complex string", b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY=')
    ]

    for data, expected in test_cases:
        assert base32_encode(data) == expected

# ===== Test cases boundary =====
def test_base32_encode_boundary():
    # Test empty string
    assert base32_encode(b"") == b""

    # Test single character (minimum input)
    assert base32_encode(b"A") == b'IE======'

    # Test input lengths that are exact multiples of 5 bits
    assert base32_encode(b"abcde") == b'MFRGGZDF'
    assert base32_encode(b"abcdef") == b'MFRGGZDFMZ======'

# ===== Test cases error =====
def test_base32_encode_error():
    # Test non-bytes input
    with pytest.raises(TypeError):
        base32_encode("string")  # type: ignore

    # Test invalid types
    with pytest.raises(TypeError):
        base32_encode(123)  # type: ignore

    with pytest.raises(TypeError):
        base32_encode(None)  # type: ignore
```
