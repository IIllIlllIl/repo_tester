```python
# Function under test
def base32_encode(data: bytes) -> bytes:
    """Encode bytes to Base32."""
    B32_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"

    if not isinstance(data, bytes):
        raise TypeError("Input must be bytes")

    binary_data = "".join(bin(ord(d))[2:].zfill(8) for d in data.decode("utf-8"))
    binary_data = binary_data.ljust(5 * ((len(binary_data) // 5) + 1), "0")
    b32_chunks = map("".join, zip(*[iter(binary_data)] * 5))
    b32_result = "".join(B32_CHARSET[int(chunk, 2)] for chunk in b32_chunks)
    return bytes(b32_result.ljust(8 * ((len(b32_result) // 8) + 1), "="), "utf-8")

# ===== Test cases =====
import pytest

@pytest.mark.parametrize("input_data,expected", [
    (b"Hello World!", b'JBSWY3DPEBLW64TMMQQQ===='),
    (b"123456", b'GEZDGNBVGY======'),
    (b"some long complex string", b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='),
])
def test_base32_encode_normal(input_data, expected):
    """Test normal cases of base32_encode."""
    assert base32_encode(input_data) == expected

@pytest.mark.parametrize("input_data,expected", [
    (b"", b''),  # Empty input
    (b"a", b'ME======'),  # Single character
    (b"ab", b'MFRA===='),  # Two characters
    (b"abcde", b'MFRGGZDF'),  # Exact 5-byte block
])
def test_base32_encode_boundary(input_data, expected):
    """Test boundary cases of base32_encode."""
    assert base32_encode(input_data) == expected

@pytest.mark.parametrize("invalid_input", [
    123,  # Integer
    "string",  # String instead of bytes
    None,  # None
    [1, 2, 3],  # List
    {"key": "value"},  # Dict
])
def test_base32_encode_error(invalid_input):
    """Test error cases of base32_encode."""
    with pytest.raises(TypeError):
        base32_encode(invalid_input)
```